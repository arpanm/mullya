
application {
  config {
    baseName mulyaa,
    serverPort 8080,
    applicationType monolith,
    packageName com.mullya.app,
    authenticationType jwt,
    prodDatabaseType mysql,
    clientFramework react,
    clientPackageManager npm,
    buildTool maven,
    enableSwaggerCodegen true,
    languages [en, bn, hi, ta, te]
  }
  entities *
  dto * with mapstruct
  paginate * with infinite-scroll
  service all with serviceImpl
}

enum ActorType {
	Buyer,
    Farmer,
    Agent
}

entity Requirement {
	minPrice Float,
    maxPrice Float,
    quantityKg Float,
    neededBy String,
    description String,
    createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String,
    status RequirementStatus
}

enum RequirementStatus {
	New,
    Accepted,
    Rejected,
    Paid,
    Cancelled,
    Refunded,
    InTransit,
    Delivered
}

relationship OneToMany {
  	User to Requirement{buyerUser}
}

entity OTP {
	otpVal Integer,
    email String,
    phone Integer,
    type OtpType,
    expiryTime LocalDate,
    status OtpStatus,
    createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String
}

entity OTPAttempt {
	otpVal Integer,
    email String,
    phone Integer,
    ip String,
    coookie String,
    createdOn LocalDate,
  	createdBy String
}

enum OtpType {
    Email,
    Phone,
    Both
}

enum OtpStatus {
    Init,
    Verified,
    Expired
}

relationship OneToMany {
	OTP to OTPAttempt{otp}
}

relationship OneToMany {
	User to OTP{user}
}

entity Address {
	streetAddress String,
	postalCode Integer,
	city String,
	stateProvince String,
    country String,
    createdBy String,
    lat Float,
    lon Float,
    mapLocation String,
    createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String
}

relationship ManyToOne {
	Requirement{buyerAddress} to Address
}

relationship OneToMany {
	User to Address{user}
}

entity Stock {
    minPrice Float,
    maxPrice Float,
    quantityKg Float,
    expiry String,
    avialableFrom String,
    description String,
    stockStatus StockStatus,
    isOpenForBidding Boolean,
    createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String
}

enum StockStatus {
	New,
    Expired,
    Sold,
    PartialSold
}

relationship OneToMany {
	User to Stock{farmer}
}

relationship ManyToOne {
	Stock{farmerAddress} to Address
}

entity BiddingDetails {
	startDate String,
    endDate String,
    biddingStatus BiddingStatus,
    minPrice Float,
    maxPrice Float,
    minQuantityKg Float,
    maxQuantityKg Float,
    isActive Boolean,
    createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String
}

enum BiddingStatus {
	New,
    InProgress,
    Completed,
    Sold
}

relationship OneToMany {
	Stock to BiddingDetails{stock}
}

entity Bids {
	bidPrice Float,
    quantityKg Float,
    bidStatus BidStatus,
    createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String
}

enum BidStatus {
	New,
    Won,
    Lost,
    Withdrawn,
    Expired,
    Paid,
    Cancelled,
    Refunded,
    InTransit,
    Delivered
}

relationship OneToMany {
	BiddingDetails to Bids{biddingDetails}
}

relationship OneToMany {
	User to Bids{buyer}
}

relationship ManyToOne {
	Bids{buyerAddress} to Address
}

entity Order {
	acceptedPrice Float,
    codAmount Float,
    quantityKg Float,
    neededBy String,
    acceptedDeliveryDate String,
    createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String,
    status OrderStatus
}

enum OrderStatus {
	New,
    Paid,
    InTransit,
    Delivered,
    ReturnInitiatedInTransit,
    ReturnInitiatedAfterDelivery,
    Returned,
    Cancelled,
    Refunded
}

relationship OneToMany {
  	Requirement to Order{requirement}
}

relationship OneToMany {
  	Bids to Order{bid}
}

relationship OneToMany {
  	User to Order{assignedAgent}
}

relationship OneToMany {
  	Stock to Order{stock}
}

entity DeliveryDetails {
    deliveryType DeliveryType,
    pickupDate String,
    deliveryDate String,
    truckDetails String,
    deliveryAgentPhone Long min(1000000000) max(9999999999),
    pickupTime LocalDate,
    deliveryTime LocalDate,
  	createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String,
    deliveryStatus DeliveryStatus
}

enum DeliveryType {
     FarmerToBuyer,
     FarmerToHub,
     HubToBuyer,
     HubToHub,
     ReturnBuyerToFarmer,
     ReturnBuyerToHub,
     ReturnHubToFarmer
}

enum DeliveryStatus {
	PendingConfirmation,
    Accepted,
    Declined
    InTransit,
    Delivered,
    ReturnInitiated,
    Returned
}

relationship ManyToOne {
	DeliveryDetails{fromAddress} to Address
}

relationship ManyToOne {
	DeliveryDetails{toAddress} to Address
}

relationship ManyToOne {
	DeliveryDetails{order} to Order
}

entity CancellationDetails {
    cancelationType CancelationType,
    cancellationReason String,
    cancellationDate String,
    cancellationTime LocalDate,
    refundId String,
    cancellationStatus CancellationStatus,
  	createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String
}

enum CancelationType {
    ByFarmer,
    ByAgent,
    ByBuyerBeforeDelivery,
    ByBuyerAfterDelivery
}

enum CancellationStatus {
    Init,
    Approved,
    RefundInitited,
    RefundCompleted,
    Rejected
}

relationship OneToOne {
	CancellationDetails{order} to Order
}

relationship OneToMany {
	CancellationDetails to DeliveryDetails{cancellation}
}

relationship OneToOne {
	CancellationDetails{approver} to User
}

relationship OneToOne {
	CancellationDetails{initiator} to User
}

entity PaymentDetails {
    amount Float,
    paymentType PaymentType,
    onlinePgType PGType,
    pgTxnId String,
    pgStatus String,
    offlineTxnId String,
    offlineTxnDetails String,
    offlineTxnCollectedBy String,
    offlineTxnClearingStatus String,
    paymentDate String,
    paymentInitTime LocalDate,
    paymentUpdateTime LocalDate,
    paymentStatus PaymentStatus,
  	createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String
}

enum PaymentType {
    Cheque,
    Draft,
    Cash,
    UPI,
    PayTM,
    Online
}

enum PGType {
     RazorPay,
     PayTM
}

enum PaymentStatus {
	Pending,
    Initiated,
    Failed,
    Success,
    Refunded
}

relationship OneToMany {
	Order to PaymentDetails{order}
}

entity RemittanceDetails {
    paymentType PaymentType,
    onlinePgType PGType,
    pgTxnId String,
    pgStatus String,
    offlineTxnId String,
    offlineTxnDetails String,
    offlineTxnGivenBy String,
    offlineTxnClearingStatus String,
    remittanceDate String,
    remittanceInitTime LocalDate,
    remittanceUpdateTime LocalDate,
    paymentStatus PaymentStatus,
  	createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String
}

relationship ManyToMany {
	Order{remittance} to RemittanceDetails{order}
}

relationship OneToMany {
	User to RemittanceDetails{farmer}
}

entity Hub {
    tag String,
    isActive Boolean,
  	createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String
}

relationship OneToOne {
    Address{hub} to Hub
}

entity Catalogue {
    name String,
    stockImageUrl String,
    landingUrl String,
    description String,
    isActive Boolean,
  	createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String
}

relationship OneToMany {
    Catalogue to Catalogue{parent}
}

relationship OneToMany {
    Catalogue{categoryStocks} to Stock{category}
}

relationship OneToMany {
    Catalogue{variantStocks} to Stock{variant}
}

relationship OneToMany {
    Catalogue{subVariantStocks} to Stock{subVariant}
}

relationship OneToMany {
    Catalogue{categoryRequirements} to Requirement{category}
}

relationship OneToMany {
    Catalogue{variantRequirements} to Requirement{variant}
}

relationship OneToMany {
    Catalogue{subVariantRequirements} to Requirement{subVariant}
}

entity Banner {
    name String,
    imageUrl String,
    mobileImageUrl String,
    landingUrl String,
    description String,
    html String,
    mobileHtml String,
    isActive Boolean,
    startDate String,
    endDate String,
  	createdOn LocalDate,
  	createdBy String,
  	updatedOn LocalDate,
  	updatedBy String
}